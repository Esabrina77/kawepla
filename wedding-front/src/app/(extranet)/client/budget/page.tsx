'use client';

import { useState } from 'react';
import { Card } from '@/components/Card/Card';
import styles from './budget.module.css';

type Expense = {
  id: string;
  category: string;
  description: string;
  amount: number;
  paid: boolean;
  dueDate?: Date;
};

type Category = {
  name: string;
  budget: number;
  icon: string;
};

export default function BudgetPage() {
  const [totalBudget, setTotalBudget] = useState(20000);
  const [expenses, setExpenses] = useState<Expense[]>([]);

  const categories: Category[] = [
    { name: 'R√©ception', budget: 8000, icon: 'üè∞' },
    { name: 'Traiteur', budget: 5000, icon: 'üçΩÔ∏è' },
    { name: 'Tenues', budget: 2000, icon: 'üëó' },
    { name: 'D√©coration', budget: 1500, icon: 'üé®' },
    { name: 'Photo/Vid√©o', budget: 1500, icon: 'üì∏' },
    { name: 'Musique', budget: 1000, icon: 'üéµ' },
    { name: 'Transport', budget: 500, icon: 'üöó' },
    { name: 'Divers', budget: 500, icon: '‚ú®' }
  ];

  const totalSpent = expenses.reduce((sum, expense) => sum + expense.amount, 0);
  const remaining = totalBudget - totalSpent;

  return (
    <div className={styles.budgetPage}>
      <div className={styles.header}>
        <h1>Budget du mariage</h1>
        <button className={styles.addButton}>
          Ajouter une d√©pense
        </button>
      </div>

      <div className={styles.overview}>
        <Card className={styles.totalCard}>
          <h2>Budget total</h2>
          <div className={styles.amount}>{totalBudget.toLocaleString()}‚Ç¨</div>
          <div className={styles.budgetProgress}>
            <div 
              className={styles.progressBar}
              style={{ width: `${(totalSpent / totalBudget) * 100}%` }}
            />
          </div>
          <div className={styles.budgetStats}>
            <div>
              <span>D√©pens√©</span>
              <span className={styles.spent}>{totalSpent.toLocaleString()}‚Ç¨</span>
            </div>
            <div>
              <span>Restant</span>
              <span className={styles.remaining}>{remaining.toLocaleString()}‚Ç¨</span>
            </div>
          </div>
        </Card>
      </div>

      <div className={styles.categories}>
        <h2>Par cat√©gorie</h2>
        <div className={styles.categoryGrid}>
          {categories.map(category => {
            const categoryExpenses = expenses.filter(e => e.category === category.name);
            const categorySpent = categoryExpenses.reduce((sum, e) => sum + e.amount, 0);
            const progress = (categorySpent / category.budget) * 100;

            return (
              <Card key={category.name} className={styles.categoryCard}>
                <div className={styles.categoryIcon}>{category.icon}</div>
                <h3>{category.name}</h3>
                <div className={styles.categoryProgress}>
                  <div 
                    className={styles.progressBar}
                    style={{ width: `${progress}%` }}
                  />
                </div>
                <div className={styles.categoryStats}>
                  <span>{categorySpent.toLocaleString()}‚Ç¨</span>
                  <span>sur {category.budget.toLocaleString()}‚Ç¨</span>
                </div>
              </Card>
            );
          })}
        </div>
      </div>

      <div className={styles.expenses}>
        <h2>Derni√®res d√©penses</h2>
        <div className={styles.expenseList}>
          {expenses.length === 0 ? (
            <Card className={styles.emptyState}>
              <p>Aucune d√©pense enregistr√©e</p>
            </Card>
          ) : (
            expenses.map(expense => (
              <Card key={expense.id} className={styles.expenseCard}>
                <div className={styles.expenseHeader}>
                  <h3>{expense.description}</h3>
                  <span className={styles.expenseAmount}>
                    {expense.amount.toLocaleString()}‚Ç¨
                  </span>
                </div>
                <div className={styles.expenseDetails}>
                  <span className={styles.expenseCategory}>{expense.category}</span>
                  {expense.dueDate && (
                    <span className={styles.expenseDate}>
                      √âch√©ance : {expense.dueDate.toLocaleDateString()}
                    </span>
                  )}
                  <span className={`${styles.expenseStatus} ${expense.paid ? styles.paid : ''}`}>
                    {expense.paid ? 'Pay√©' : '√Ä payer'}
                  </span>
                </div>
              </Card>
            ))
          )}
        </div>
      </div>
    </div>
  );
} 