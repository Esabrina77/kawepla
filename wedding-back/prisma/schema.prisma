generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                  @id @default(cuid())
  email                String                  @unique
  password             String
  firstName            String
  lastName             String
  role                 UserRole                @default(HOST)
  isActive             Boolean                 @default(true)
  emailVerified        Boolean                 @default(false)
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  stripeCustomerId     String?
  clientBookings       Booking[]               @relation("ClientBookings")
  adminConversations   Conversation[]          @relation("AdminConversations")
  userConversations    Conversation[]          @relation("UserConversations")
  guests               Guest[]
  invitations          Invitation[]
  sentMessages         Message[]               @relation("SentMessages")
  newsletterRecipients NewsletterRecipient[]   @relation("NewsletterRecipients")
  createdNewsletters   Newsletter[]            @relation("NewsletterCreator")
  passwordResets       PasswordReset[]
  providerProfile      ProviderProfile?
  purchaseHistory      PurchaseHistory[]
  pushSubscriptions    PushSubscription?
  refreshTokens        RefreshToken[]
  reviews              Review[]                @relation("ClientReviews")
  servicePurchases     ServicePurchase[]
  additionalServices   UserAdditionalService[]

  @@map("users")
}

model ProviderProfile {
  id              String          @id @default(cuid())
  userId          String          @unique
  businessName    String
  description     String
  phone           String
  status          ProviderStatus  @default(APPROVED)
  verifiedAt      DateTime        @default(now())
  profilePhoto    String?
  portfolio       String[]
  rating          Float           @default(0)
  reviewCount     Int             @default(0)
  bookingCount    Int             @default(0)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  categoryId      String
  commissionRate  Float           @default(0.15)
  displayCity     String
  latitude        Float
  longitude       Float
  serviceRadius   Int             @default(25)
  stripeAccountId String?
  stripeOnboarded Boolean         @default(false)
  totalEarnings   Float           @default(0)
  bookings        Booking[]       @relation("ProviderBookings")
  category        ServiceCategory @relation(fields: [categoryId], references: [id])
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews         Review[]        @relation("ProviderReviews")
  services        Service[]

  @@map("provider_profiles")
}

model ServiceCategory {
  id          String            @id @default(cuid())
  name        String            @unique
  description String?
  icon        String?
  color       String?
  isActive    Boolean           @default(true)
  sortOrder   Int               @default(0)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  providers   ProviderProfile[]
  services    Service[]

  @@map("service_categories")
}

model Service {
  id               String          @id @default(cuid())
  providerId       String
  categoryId       String
  name             String
  description      String
  shortDescription String?
  price            Float
  priceType        String
  currency         String          @default("EUR")
  minPrice         Float?
  maxPrice         Float?
  duration         Int?
  capacity         Int?
  includes         String[]
  requirements     String[]
  photos           String[]
  videos           String[]
  isActive         Boolean         @default(true)
  availability     Json?
  rating           Float           @default(0)
  reviewCount      Int             @default(0)
  bookingCount     Int             @default(0)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  eventTypes       EventType[]
  bookings         Booking[]
  reviews          Review[]
  category         ServiceCategory @relation(fields: [categoryId], references: [id])
  provider         ProviderProfile @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@map("services")
}

model Booking {
  id                    String          @id @default(cuid())
  clientId              String
  providerId            String
  serviceId             String
  eventDate             DateTime
  clientName            String
  clientPhone           String
  clientEmail           String
  guestCount            Int?
  status                BookingStatus   @default(PENDING)
  totalPrice            Float
  stripePaymentIntentId String?
  confirmedAt           DateTime?
  completedAt           DateTime?
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  eventTime             String?
  eventType             EventType
  message               String?
  ourCommission         Float
  paidAt                DateTime?
  providerAmount        Float
  stripeTransferId      String?
  client                User            @relation("ClientBookings", fields: [clientId], references: [id], onDelete: Cascade)
  provider              ProviderProfile @relation("ProviderBookings", fields: [providerId], references: [id], onDelete: Cascade)
  service               Service         @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  reviews               Review[]

  @@map("bookings")
}

model Review {
  id                  String          @id @default(cuid())
  clientId            String
  providerId          String
  serviceId           String
  bookingId           String
  rating              Int
  comment             String?
  qualityRating       Int?
  communicationRating Int?
  valueRating         Int?
  punctualityRating   Int?
  isVerified          Boolean         @default(false)
  isPublic            Boolean         @default(true)
  moderatedAt         DateTime?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  booking             Booking         @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  client              User            @relation("ClientReviews", fields: [clientId], references: [id], onDelete: Cascade)
  provider            ProviderProfile @relation("ProviderReviews", fields: [providerId], references: [id], onDelete: Cascade)
  service             Service         @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model UserAdditionalService {
  id        String   @id @default(cuid())
  userId    String
  serviceId String
  quantity  Int
  type      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_additional_services")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model EmailVerification {
  id        String   @id @default(cuid())
  email     String
  code      String
  expiresAt DateTime
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("email_verifications")
}

model ServicePurchase {
  id               String         @id @default(cuid())
  userId           String
  tier             ServiceTier
  status           PurchaseStatus @default(ACTIVE)
  stripePaymentId  String?        @unique
  stripePriceId    String?
  stripeCustomerId String?
  quantity         Int            @default(1)
  purchasedAt      DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("service_purchases")
}

model PurchaseHistory {
  id              String      @id @default(cuid())
  userId          String
  tier            ServiceTier
  quantity        Int         @default(1)
  price           Float
  currency        String      @default("EUR")
  stripePaymentId String?
  purchasedAt     DateTime    @default(now())
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("purchase_history")
}

model Design {
  id              String       @id @default(cuid())
  name            String
  description     String?
  category        String?
  tags            String[]
  isActive        Boolean      @default(true)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  template        Json
  styles          Json
  variables       Json?
  version         String       @default("1.0.0")
  customFonts     Json?
  backgroundImage String?
  priceType       ServiceTier  @default(FREE)
  invitations     Invitation[]

  @@map("designs")
}

model Invitation {
  id                 String           @id @default(cuid())
  description        String?
  status             InvitationStatus @default(DRAFT)
  photos             Json[]           @default([])
  languages          String[]         @default(["fr"])
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  userId             String
  designId           String
  moreInfo           String?
  shareableEnabled   Boolean          @default(false)
  shareableMaxUses   Int?             @default(50)
  shareableToken     String?          @unique
  shareableUsedCount Int              @default(0)
  customText         String?
  eventDate          DateTime
  eventTime          String?
  eventTitle         String
  eventType          EventType        @default(WEDDING)
  location           String
  conversations      Conversation[]
  guests             Guest[]
  design             Design           @relation(fields: [designId], references: [id])
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  photoAlbums        PhotoAlbum[]
  rsvps              RSVP[]
  shareableLinks     ShareableLink[]

  @@map("invitations")
}

model ShareableLink {
  id           String              @id @default(cuid())
  token        String              @unique
  isActive     Boolean             @default(true)
  maxUses      Int                 @default(50)
  usedCount    Int                 @default(0)
  expiresAt    DateTime?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  invitationId String
  guestId      String?             @unique
  status       ShareableLinkStatus @default(SHARED)
  guest        Guest?              @relation(fields: [guestId], references: [id])
  invitation   Invitation          @relation(fields: [invitationId], references: [id], onDelete: Cascade)

  @@map("shareable_links")
}

model Guest {
  id                  String         @id @default(cuid())
  firstName           String
  lastName            String
  email               String?
  phone               String?
  isVIP               Boolean        @default(false)
  dietaryRestrictions String?
  plusOne             Boolean        @default(false)
  plusOneName         String?
  inviteToken         String         @unique
  usedAt              DateTime?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  userId              String
  invitationId        String
  invitationSentAt    DateTime?
  invitationType      InvitationType @default(PERSONAL)
  sharedLinkUsed      Boolean        @default(false)
  profilePhotoUrl     String?
  invitation          Invitation     @relation(fields: [invitationId], references: [id], onDelete: Cascade)
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos              Photo[]
  rsvp                RSVP?
  shareableLink       ShareableLink?

  @@unique([invitationId, email], name: "unique_email_per_invitation")
  @@map("guests")
}

model RSVP {
  id                 String     @id @default(cuid())
  status             RSVPStatus @default(PENDING)
  message            String?
  attendingCeremony  Boolean    @default(true)
  attendingReception Boolean    @default(true)
  numberOfGuests     Int        @default(1)
  respondedAt        DateTime?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  invitationId       String
  guestId            String     @unique
  profilePhotoUrl    String?
  guest              Guest      @relation(fields: [guestId], references: [id], onDelete: Cascade)
  invitation         Invitation @relation(fields: [invitationId], references: [id], onDelete: Cascade)

  @@map("rsvps")
}

model Conversation {
  id            String             @id @default(cuid())
  userId        String
  invitationId  String
  adminId       String?
  status        ConversationStatus @default(ACTIVE)
  lastMessageAt DateTime           @default(now())
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  admin         User?              @relation("AdminConversations", fields: [adminId], references: [id])
  invitation    Invitation         @relation(fields: [invitationId], references: [id], onDelete: Cascade)
  user          User               @relation("UserConversations", fields: [userId], references: [id], onDelete: Cascade)
  messages      Message[]

  @@map("conversations")
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  senderId       String
  content        String
  messageType    MessageType  @default(TEXT)
  isRead         Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model PasswordReset {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

model PhotoAlbum {
  id            String     @id @default(cuid())
  title         String
  description   String?
  isPublic      Boolean    @default(false)
  coverPhotoUrl String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  invitationId  String
  invitation    Invitation @relation(fields: [invitationId], references: [id], onDelete: Cascade)
  photos        Photo[]

  @@map("photo_albums")
}

model Photo {
  id            String      @id @default(cuid())
  originalUrl   String
  compressedUrl String?
  thumbnailUrl  String?
  filename      String
  size          Int
  width         Int?
  height        Int?
  mimeType      String
  status        PhotoStatus @default(PENDING)
  caption       String?
  uploadedAt    DateTime    @default(now())
  approvedAt    DateTime?
  publishedAt   DateTime?
  albumId       String
  uploadedById  String?
  album         PhotoAlbum  @relation(fields: [albumId], references: [id], onDelete: Cascade)
  uploadedBy    Guest?      @relation(fields: [uploadedById], references: [id])

  @@map("photos")
}

model PushSubscription {
  id        String   @id @default(cuid())
  userId    String   @unique
  endpoint  String
  p256dh    String
  auth      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("push_subscriptions")
}

model Newsletter {
  id              String                @id @default(cuid())
  title           String
  subject         String
  content         String
  htmlContent     String?
  status          NewsletterStatus      @default(DRAFT)
  targetAudience  NewsletterAudience    @default(ALL_USERS)
  specificUserIds String[]              @default([])
  scheduledAt     DateTime?
  sentAt          DateTime?
  sentCount       Int                   @default(0)
  openCount       Int                   @default(0)
  clickCount      Int                   @default(0)
  createdBy       String
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  recipients      NewsletterRecipient[]
  creator         User                  @relation("NewsletterCreator", fields: [createdBy], references: [id])

  @@map("newsletters")
}

model NewsletterRecipient {
  id           String     @id @default(cuid())
  newsletterId String
  userId       String
  sentAt       DateTime?
  openedAt     DateTime?
  clickedAt    DateTime?
  status       String     @default("PENDING")
  newsletter   Newsletter @relation(fields: [newsletterId], references: [id], onDelete: Cascade)
  user         User       @relation("NewsletterRecipients", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([newsletterId, userId])
  @@map("newsletter_recipients")
}

enum UserRole {
  ADMIN
  HOST
  GUEST
  PROVIDER
}

enum ServiceTier {
  FREE
  ESSENTIAL
  ELEGANT
  PREMIUM
  LUXE
}

enum PurchaseStatus {
  ACTIVE
  COMPLETED
  REFUNDED
}

enum RSVPStatus {
  PENDING
  CONFIRMED
  DECLINED
}

enum InvitationStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum InvitationType {
  PERSONAL
  SHAREABLE
}

enum EventType {
  WEDDING
  BIRTHDAY
  BAPTISM
  ANNIVERSARY
  GRADUATION
  BABY_SHOWER
  ENGAGEMENT
  COMMUNION
  CONFIRMATION
  RETIREMENT
  HOUSEWARMING
  CORPORATE
  OTHER
}

enum ShareableLinkStatus {
  SHARED
  USED
  CONFIRMED
}

enum ProviderStatus {
  PENDING
  APPROVED
  SUSPENDED
  REJECTED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  DISPUTED
}

enum ServiceType {
  BEAUTY
  VENUE
  PHOTOGRAPHY
  MUSIC
  TRANSPORT
  DECORATION
  CATERING
  OTHER
}

enum ConversationStatus {
  ACTIVE
  ARCHIVED
  CLOSED
}

enum MessageType {
  TEXT
  RSVP_NOTIFICATION
  SYSTEM
}

enum PhotoStatus {
  PENDING
  APPROVED
  REJECTED
  PUBLIC
}

enum NewsletterStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  CANCELLED
}

enum NewsletterAudience {
  ALL_USERS
  HOSTS_ONLY
  PROVIDERS_ONLY
  ADMINS_ONLY
  SPECIFIC_USERS
}
