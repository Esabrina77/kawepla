// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://weduser:wed_password200@localhost:5432/wedding_invitations"
}

enum UserRole {
  ADMIN
  COUPLE
  GUEST
}

enum SubscriptionTier {
  BASIC
  STANDARD
  PREMIUM
}

enum RSVPStatus {
  PENDING
  CONFIRMED
  DECLINED
}

enum InvitationStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model User {
  id                String            @id @default(cuid())
  email             String            @unique
  password          String
  firstName         String
  lastName          String
  role              UserRole          @default(COUPLE)
  subscriptionTier  SubscriptionTier  @default(BASIC)
  subscriptionEndDate DateTime?
  isActive          Boolean           @default(true)
  emailVerified     Boolean           @default(false)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  invitations       Invitation[]
  guests            Guest[]
  refreshTokens     RefreshToken[]
  adminDesigns      Design[]          @relation("AdminDesigns")
  
  // Relations pour la messagerie
  userConversations Conversation[]    @relation("UserConversations")
  adminConversations Conversation[]   @relation("AdminConversations")
  sentMessages      Message[]         @relation("SentMessages")

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model EmailVerification {
  id        String   @id @default(cuid())
  email     String
  code      String   // Code de vérification (6 chiffres)
  expiresAt DateTime
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("email_verifications")
}

model Design {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String?  // Catégorie du design (boho, moderne, traditionnel, etc.)
  tags        String[] // Tags pour filtrer les designs
  isActive    Boolean  @default(true)
  isPremium   Boolean  @default(false)
  price       Float?
  createdBy   String?  // Admin ID
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Template Structure
  template    Json     // Stockage du HTML de base
  styles      Json     // Stockage des styles en JSON
  components  Json?    // Composants réutilisables
  variables   Json?    // Variables personnalisables (couleurs, fonts, etc.)
  version     String   @default("1.0.0") // Pour la gestion des versions

  // Nouvelles fonctionnalités
  customFonts Json?    // Polices personnalisées { "name": "font-url", ... }
  backgroundImage String? // URL de l'image de fond par défaut
  backgroundImageRequired Boolean @default(false) // Si le design nécessite une image de fond
  previewImages Json?   // Images de prévisualisation du design

  // Relations
  admin       User?    @relation("AdminDesigns", fields: [createdBy], references: [id])
  invitations Invitation[]

  @@map("designs")
}

model Invitation {
  id              String            @id @default(cuid())
  
  // Informations du couple
  coupleName      String
  
  // Date et heure
  weddingDate     DateTime
  ceremonyTime    String?
  receptionTime   String?
  
  // Textes d'invitation
  invitationText  String?           @default("Vous êtes cordialement invités")
  
  // Lieu et détails
  venueName       String
  venueAddress    String
  venueCoordinates String?          // "lat,lng" format
  moreInfo        String?           // Description/détails supplémentaires
  
  // RSVP
  rsvpDetails     String?           @default("Merci de confirmer votre présence")
  rsvpForm        String?           @default("RSVP requis")
  rsvpDate        DateTime?         // Date limite RSVP
  
  // Messages personnalisés
  message         String?           @default("Votre présence sera notre plus beau cadeau")
  blessingText    String?           @default("Avec leurs familles")
  welcomeMessage  String?           @default("Bienvenue à notre mariage")
  
  // Informations supplémentaires
  dressCode       String?           @default("Tenue de soirée souhaitée")
  contact         String?           // Informations de contact
  
  // Champs existants conservés
  title           String?           // Titre de l'invitation (optionnel maintenant)
  description     String?
  customDomain    String?           @unique
  status          InvitationStatus  @default(DRAFT)
  photos          Json[]            @default([])
  program         Json?             // Programme détaillé structuré
  restrictions    String?           // Restrictions alimentaires
  languages       String[]          @default(["fr"])
  maxGuests       Int?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  userId          String
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  designId        String
  design          Design            @relation(fields: [designId], references: [id])
  guests          Guest[]
  rsvps           RSVP[]
  conversations   Conversation[]

  @@map("invitations")
}

model Guest {
  id            String   @id @default(cuid())
  firstName     String
  lastName      String
  email         String?
  phone         String?
  isVIP         Boolean  @default(false)
  dietaryRestrictions String?
  plusOne       Boolean  @default(false)
  plusOneName   String?
  inviteToken   String   @unique
  usedAt        DateTime?
  invitationSentAt DateTime? // Date d'envoi de l'invitation par email
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  invitationId  String
  invitation    Invitation @relation(fields: [invitationId], references: [id], onDelete: Cascade)
  rsvp          RSVP?

  // Contrainte d'unicité : un email ne peut être utilisé qu'une seule fois par invitation
  @@unique([invitationId, email], name: "unique_email_per_invitation")
  @@map("guests")
}

model RSVP {
  id            String      @id @default(cuid())
  status        RSVPStatus  @default(PENDING)
  message       String?
  attendingCeremony Boolean  @default(true)
  attendingReception Boolean @default(true)
  numberOfGuests Int        @default(1)
  respondedAt   DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  invitationId  String
  invitation    Invitation  @relation(fields: [invitationId], references: [id], onDelete: Cascade)
  guestId       String      @unique
  guest         Guest       @relation(fields: [guestId], references: [id], onDelete: Cascade)

  @@map("rsvps")
}

// Modèles pour la messagerie
model Conversation {
  id            String   @id @default(cuid())
  userId        String   // ID du client
  invitationId  String   // ID de l'invitation
  adminId       String?  // ID de l'admin assigné (optionnel)
  status        ConversationStatus @default(ACTIVE)
  lastMessageAt DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user          User     @relation("UserConversations", fields: [userId], references: [id], onDelete: Cascade)
  invitation    Invitation @relation(fields: [invitationId], references: [id], onDelete: Cascade)
  admin         User?    @relation("AdminConversations", fields: [adminId], references: [id], onDelete: SetNull)
  messages      Message[]

  @@map("conversations")
}

model Message {
  id             String      @id @default(cuid())
  conversationId String
  senderId       String
  content        String
  messageType    MessageType @default(TEXT)
  isRead         Boolean     @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

enum ConversationStatus {
  ACTIVE
  ARCHIVED
  CLOSED
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
} 